# generated from rosidl_generator_py/resource/_idl.py.em
# with input from hqv_public_interface:srv/MowerSlamMapHandling.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_MowerSlamMapHandling_Request(type):
    """Metaclass of message 'MowerSlamMapHandling_Request'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
        'MESSAGE_TYPE_GET_ACTIVE_MAP': 1,
        'MESSAGE_TYPE_LIST_MAPS': 4,
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('hqv_public_interface')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'hqv_public_interface.srv.MowerSlamMapHandling_Request')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__srv__mower_slam_map_handling__request
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__srv__mower_slam_map_handling__request
            cls._CONVERT_TO_PY = module.convert_to_py_msg__srv__mower_slam_map_handling__request
            cls._TYPE_SUPPORT = module.type_support_msg__srv__mower_slam_map_handling__request
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__srv__mower_slam_map_handling__request

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
            'MESSAGE_TYPE_GET_ACTIVE_MAP': cls.__constants['MESSAGE_TYPE_GET_ACTIVE_MAP'],
            'MESSAGE_TYPE_LIST_MAPS': cls.__constants['MESSAGE_TYPE_LIST_MAPS'],
        }

    @property
    def MESSAGE_TYPE_GET_ACTIVE_MAP(self):
        """Message constant 'MESSAGE_TYPE_GET_ACTIVE_MAP'."""
        return Metaclass_MowerSlamMapHandling_Request.__constants['MESSAGE_TYPE_GET_ACTIVE_MAP']

    @property
    def MESSAGE_TYPE_LIST_MAPS(self):
        """Message constant 'MESSAGE_TYPE_LIST_MAPS'."""
        return Metaclass_MowerSlamMapHandling_Request.__constants['MESSAGE_TYPE_LIST_MAPS']


class MowerSlamMapHandling_Request(metaclass=Metaclass_MowerSlamMapHandling_Request):
    """
    Message class 'MowerSlamMapHandling_Request'.

    Constants:
      MESSAGE_TYPE_GET_ACTIVE_MAP
      MESSAGE_TYPE_LIST_MAPS
    """

    __slots__ = [
        '_message_type',
        '_map_id',
    ]

    _fields_and_field_types = {
        'message_type': 'uint8',
        'map_id': 'uint32',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.message_type = kwargs.get('message_type', int())
        self.map_id = kwargs.get('map_id', int())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.message_type != other.message_type:
            return False
        if self.map_id != other.map_id:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def message_type(self):
        """Message field 'message_type'."""
        return self._message_type

    @message_type.setter
    def message_type(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'message_type' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'message_type' field must be an unsigned integer in [0, 255]"
        self._message_type = value

    @property
    def map_id(self):
        """Message field 'map_id'."""
        return self._map_id

    @map_id.setter
    def map_id(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'map_id' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'map_id' field must be an unsigned integer in [0, 4294967295]"
        self._map_id = value


# Import statements for member types

# Member 'map_ids'
import numpy  # noqa: E402, I100

# already imported above
# import rosidl_parser.definition


class Metaclass_MowerSlamMapHandling_Response(type):
    """Metaclass of message 'MowerSlamMapHandling_Response'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('hqv_public_interface')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'hqv_public_interface.srv.MowerSlamMapHandling_Response')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__srv__mower_slam_map_handling__response
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__srv__mower_slam_map_handling__response
            cls._CONVERT_TO_PY = module.convert_to_py_msg__srv__mower_slam_map_handling__response
            cls._TYPE_SUPPORT = module.type_support_msg__srv__mower_slam_map_handling__response
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__srv__mower_slam_map_handling__response

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class MowerSlamMapHandling_Response(metaclass=Metaclass_MowerSlamMapHandling_Response):
    """Message class 'MowerSlamMapHandling_Response'."""

    __slots__ = [
        '_map_id',
        '_map_ids',
    ]

    _fields_and_field_types = {
        'map_id': 'uint32',
        'map_ids': 'uint32[10]',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.Array(rosidl_parser.definition.BasicType('uint32'), 10),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.map_id = kwargs.get('map_id', int())
        if 'map_ids' not in kwargs:
            self.map_ids = numpy.zeros(10, dtype=numpy.uint32)
        else:
            self.map_ids = numpy.array(kwargs.get('map_ids'), dtype=numpy.uint32)
            assert self.map_ids.shape == (10, )

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.map_id != other.map_id:
            return False
        if all(self.map_ids != other.map_ids):
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def map_id(self):
        """Message field 'map_id'."""
        return self._map_id

    @map_id.setter
    def map_id(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'map_id' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'map_id' field must be an unsigned integer in [0, 4294967295]"
        self._map_id = value

    @property
    def map_ids(self):
        """Message field 'map_ids'."""
        return self._map_ids

    @map_ids.setter
    def map_ids(self, value):
        if isinstance(value, numpy.ndarray):
            assert value.dtype == numpy.uint32, \
                "The 'map_ids' numpy.ndarray() must have the dtype of 'numpy.uint32'"
            assert value.size == 10, \
                "The 'map_ids' numpy.ndarray() must have a size of 10"
            self._map_ids = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 len(value) == 10 and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 4294967296 for val in value)), \
                "The 'map_ids' field must be a set or sequence with length 10 and each value of type 'int' and each unsigned integer in [0, 4294967295]"
        self._map_ids = numpy.array(value, dtype=numpy.uint32)


class Metaclass_MowerSlamMapHandling(type):
    """Metaclass of service 'MowerSlamMapHandling'."""

    _TYPE_SUPPORT = None

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('hqv_public_interface')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'hqv_public_interface.srv.MowerSlamMapHandling')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._TYPE_SUPPORT = module.type_support_srv__srv__mower_slam_map_handling

            from hqv_public_interface.srv import _mower_slam_map_handling
            if _mower_slam_map_handling.Metaclass_MowerSlamMapHandling_Request._TYPE_SUPPORT is None:
                _mower_slam_map_handling.Metaclass_MowerSlamMapHandling_Request.__import_type_support__()
            if _mower_slam_map_handling.Metaclass_MowerSlamMapHandling_Response._TYPE_SUPPORT is None:
                _mower_slam_map_handling.Metaclass_MowerSlamMapHandling_Response.__import_type_support__()


class MowerSlamMapHandling(metaclass=Metaclass_MowerSlamMapHandling):
    from hqv_public_interface.srv._mower_slam_map_handling import MowerSlamMapHandling_Request as Request
    from hqv_public_interface.srv._mower_slam_map_handling import MowerSlamMapHandling_Response as Response

    def __init__(self):
        raise NotImplementedError('Service classes can not be instantiated')
