# generated from rosidl_generator_py/resource/_idl.py.em
# with input from hqv_public_interface:msg/WheelPair.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_WheelPair(type):
    """Metaclass of message 'WheelPair'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('hqv_public_interface')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'hqv_public_interface.msg.WheelPair')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__wheel_pair
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__wheel_pair
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__wheel_pair
            cls._TYPE_SUPPORT = module.type_support_msg__msg__wheel_pair
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__wheel_pair

            from std_msgs.msg import Header
            if Header.__class__._TYPE_SUPPORT is None:
                Header.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class WheelPair(metaclass=Metaclass_WheelPair):
    """Message class 'WheelPair'."""

    __slots__ = [
        '_header',
        '_power_left',
        '_power_right',
        '_counter_left',
        '_counter_right',
        '_free_left',
        '_free_right',
        '_deltadistance_left',
        '_deltadistance_right',
        '_state_left',
        '_state_right',
        '_current_left',
        '_current_right',
        '_speed_left',
        '_speed_right',
        '_isrunning_left',
        '_isrunning_right',
    ]

    _fields_and_field_types = {
        'header': 'std_msgs/Header',
        'power_left': 'uint16',
        'power_right': 'uint16',
        'counter_left': 'int32',
        'counter_right': 'int32',
        'free_left': 'uint8',
        'free_right': 'uint8',
        'deltadistance_left': 'float',
        'deltadistance_right': 'float',
        'state_left': 'uint8',
        'state_right': 'uint8',
        'current_left': 'int16',
        'current_right': 'int16',
        'speed_left': 'float',
        'speed_right': 'float',
        'isrunning_left': 'boolean',
        'isrunning_right': 'boolean',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Header'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('int16'),  # noqa: E501
        rosidl_parser.definition.BasicType('int16'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('float'),  # noqa: E501
        rosidl_parser.definition.BasicType('boolean'),  # noqa: E501
        rosidl_parser.definition.BasicType('boolean'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        from std_msgs.msg import Header
        self.header = kwargs.get('header', Header())
        self.power_left = kwargs.get('power_left', int())
        self.power_right = kwargs.get('power_right', int())
        self.counter_left = kwargs.get('counter_left', int())
        self.counter_right = kwargs.get('counter_right', int())
        self.free_left = kwargs.get('free_left', int())
        self.free_right = kwargs.get('free_right', int())
        self.deltadistance_left = kwargs.get('deltadistance_left', float())
        self.deltadistance_right = kwargs.get('deltadistance_right', float())
        self.state_left = kwargs.get('state_left', int())
        self.state_right = kwargs.get('state_right', int())
        self.current_left = kwargs.get('current_left', int())
        self.current_right = kwargs.get('current_right', int())
        self.speed_left = kwargs.get('speed_left', float())
        self.speed_right = kwargs.get('speed_right', float())
        self.isrunning_left = kwargs.get('isrunning_left', bool())
        self.isrunning_right = kwargs.get('isrunning_right', bool())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.header != other.header:
            return False
        if self.power_left != other.power_left:
            return False
        if self.power_right != other.power_right:
            return False
        if self.counter_left != other.counter_left:
            return False
        if self.counter_right != other.counter_right:
            return False
        if self.free_left != other.free_left:
            return False
        if self.free_right != other.free_right:
            return False
        if self.deltadistance_left != other.deltadistance_left:
            return False
        if self.deltadistance_right != other.deltadistance_right:
            return False
        if self.state_left != other.state_left:
            return False
        if self.state_right != other.state_right:
            return False
        if self.current_left != other.current_left:
            return False
        if self.current_right != other.current_right:
            return False
        if self.speed_left != other.speed_left:
            return False
        if self.speed_right != other.speed_right:
            return False
        if self.isrunning_left != other.isrunning_left:
            return False
        if self.isrunning_right != other.isrunning_right:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def header(self):
        """Message field 'header'."""
        return self._header

    @header.setter
    def header(self, value):
        if __debug__:
            from std_msgs.msg import Header
            assert \
                isinstance(value, Header), \
                "The 'header' field must be a sub message of type 'Header'"
        self._header = value

    @property
    def power_left(self):
        """Message field 'power_left'."""
        return self._power_left

    @power_left.setter
    def power_left(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'power_left' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 'power_left' field must be an unsigned integer in [0, 65535]"
        self._power_left = value

    @property
    def power_right(self):
        """Message field 'power_right'."""
        return self._power_right

    @power_right.setter
    def power_right(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'power_right' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 'power_right' field must be an unsigned integer in [0, 65535]"
        self._power_right = value

    @property
    def counter_left(self):
        """Message field 'counter_left'."""
        return self._counter_left

    @counter_left.setter
    def counter_left(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'counter_left' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'counter_left' field must be an integer in [-2147483648, 2147483647]"
        self._counter_left = value

    @property
    def counter_right(self):
        """Message field 'counter_right'."""
        return self._counter_right

    @counter_right.setter
    def counter_right(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'counter_right' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'counter_right' field must be an integer in [-2147483648, 2147483647]"
        self._counter_right = value

    @property
    def free_left(self):
        """Message field 'free_left'."""
        return self._free_left

    @free_left.setter
    def free_left(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'free_left' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'free_left' field must be an unsigned integer in [0, 255]"
        self._free_left = value

    @property
    def free_right(self):
        """Message field 'free_right'."""
        return self._free_right

    @free_right.setter
    def free_right(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'free_right' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'free_right' field must be an unsigned integer in [0, 255]"
        self._free_right = value

    @property
    def deltadistance_left(self):
        """Message field 'deltadistance_left'."""
        return self._deltadistance_left

    @deltadistance_left.setter
    def deltadistance_left(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'deltadistance_left' field must be of type 'float'"
        self._deltadistance_left = value

    @property
    def deltadistance_right(self):
        """Message field 'deltadistance_right'."""
        return self._deltadistance_right

    @deltadistance_right.setter
    def deltadistance_right(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'deltadistance_right' field must be of type 'float'"
        self._deltadistance_right = value

    @property
    def state_left(self):
        """Message field 'state_left'."""
        return self._state_left

    @state_left.setter
    def state_left(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'state_left' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'state_left' field must be an unsigned integer in [0, 255]"
        self._state_left = value

    @property
    def state_right(self):
        """Message field 'state_right'."""
        return self._state_right

    @state_right.setter
    def state_right(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'state_right' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'state_right' field must be an unsigned integer in [0, 255]"
        self._state_right = value

    @property
    def current_left(self):
        """Message field 'current_left'."""
        return self._current_left

    @current_left.setter
    def current_left(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'current_left' field must be of type 'int'"
            assert value >= -32768 and value < 32768, \
                "The 'current_left' field must be an integer in [-32768, 32767]"
        self._current_left = value

    @property
    def current_right(self):
        """Message field 'current_right'."""
        return self._current_right

    @current_right.setter
    def current_right(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'current_right' field must be of type 'int'"
            assert value >= -32768 and value < 32768, \
                "The 'current_right' field must be an integer in [-32768, 32767]"
        self._current_right = value

    @property
    def speed_left(self):
        """Message field 'speed_left'."""
        return self._speed_left

    @speed_left.setter
    def speed_left(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'speed_left' field must be of type 'float'"
        self._speed_left = value

    @property
    def speed_right(self):
        """Message field 'speed_right'."""
        return self._speed_right

    @speed_right.setter
    def speed_right(self, value):
        if __debug__:
            assert \
                isinstance(value, float), \
                "The 'speed_right' field must be of type 'float'"
        self._speed_right = value

    @property
    def isrunning_left(self):
        """Message field 'isrunning_left'."""
        return self._isrunning_left

    @isrunning_left.setter
    def isrunning_left(self, value):
        if __debug__:
            assert \
                isinstance(value, bool), \
                "The 'isrunning_left' field must be of type 'bool'"
        self._isrunning_left = value

    @property
    def isrunning_right(self):
        """Message field 'isrunning_right'."""
        return self._isrunning_right

    @isrunning_right.setter
    def isrunning_right(self, value):
        if __debug__:
            assert \
                isinstance(value, bool), \
                "The 'isrunning_right' field must be of type 'bool'"
        self._isrunning_right = value
