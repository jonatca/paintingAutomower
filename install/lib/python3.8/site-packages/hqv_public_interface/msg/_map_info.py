# generated from rosidl_generator_py/resource/_idl.py.em
# with input from hqv_public_interface:msg/MapInfo.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_MapInfo(type):
    """Metaclass of message 'MapInfo'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('hqv_public_interface')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'hqv_public_interface.msg.MapInfo')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__map_info
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__map_info
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__map_info
            cls._TYPE_SUPPORT = module.type_support_msg__msg__map_info
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__map_info

            from geometry_msgs.msg import Point32
            if Point32.__class__._TYPE_SUPPORT is None:
                Point32.__class__.__import_type_support__()

            from hqv_public_interface.msg import MapShape
            if MapShape.__class__._TYPE_SUPPORT is None:
                MapShape.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class MapInfo(metaclass=Metaclass_MapInfo):
    """Message class 'MapInfo'."""

    __slots__ = [
        '_map_name',
        '_cs_pos',
        '_pc_pos',
        '_charging_station',
        '_working_areas',
        '_transport_areas',
        '_forbidden_areas',
        '_hidden_areas',
        '_transport_paths',
        '_poi_paths',
    ]

    _fields_and_field_types = {
        'map_name': 'string',
        'cs_pos': 'geometry_msgs/Point32',
        'pc_pos': 'geometry_msgs/Point32',
        'charging_station': 'hqv_public_interface/MapShape',
        'working_areas': 'sequence<hqv_public_interface/MapShape>',
        'transport_areas': 'sequence<hqv_public_interface/MapShape>',
        'forbidden_areas': 'sequence<hqv_public_interface/MapShape>',
        'hidden_areas': 'sequence<hqv_public_interface/MapShape>',
        'transport_paths': 'sequence<hqv_public_interface/MapShape>',
        'poi_paths': 'sequence<hqv_public_interface/MapShape>',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.UnboundedString(),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['geometry_msgs', 'msg'], 'Point32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['geometry_msgs', 'msg'], 'Point32'),  # noqa: E501
        rosidl_parser.definition.NamespacedType(['hqv_public_interface', 'msg'], 'MapShape'),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['hqv_public_interface', 'msg'], 'MapShape')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['hqv_public_interface', 'msg'], 'MapShape')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['hqv_public_interface', 'msg'], 'MapShape')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['hqv_public_interface', 'msg'], 'MapShape')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['hqv_public_interface', 'msg'], 'MapShape')),  # noqa: E501
        rosidl_parser.definition.UnboundedSequence(rosidl_parser.definition.NamespacedType(['hqv_public_interface', 'msg'], 'MapShape')),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.map_name = kwargs.get('map_name', str())
        from geometry_msgs.msg import Point32
        self.cs_pos = kwargs.get('cs_pos', Point32())
        from geometry_msgs.msg import Point32
        self.pc_pos = kwargs.get('pc_pos', Point32())
        from hqv_public_interface.msg import MapShape
        self.charging_station = kwargs.get('charging_station', MapShape())
        self.working_areas = kwargs.get('working_areas', [])
        self.transport_areas = kwargs.get('transport_areas', [])
        self.forbidden_areas = kwargs.get('forbidden_areas', [])
        self.hidden_areas = kwargs.get('hidden_areas', [])
        self.transport_paths = kwargs.get('transport_paths', [])
        self.poi_paths = kwargs.get('poi_paths', [])

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.map_name != other.map_name:
            return False
        if self.cs_pos != other.cs_pos:
            return False
        if self.pc_pos != other.pc_pos:
            return False
        if self.charging_station != other.charging_station:
            return False
        if self.working_areas != other.working_areas:
            return False
        if self.transport_areas != other.transport_areas:
            return False
        if self.forbidden_areas != other.forbidden_areas:
            return False
        if self.hidden_areas != other.hidden_areas:
            return False
        if self.transport_paths != other.transport_paths:
            return False
        if self.poi_paths != other.poi_paths:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def map_name(self):
        """Message field 'map_name'."""
        return self._map_name

    @map_name.setter
    def map_name(self, value):
        if __debug__:
            assert \
                isinstance(value, str), \
                "The 'map_name' field must be of type 'str'"
        self._map_name = value

    @property
    def cs_pos(self):
        """Message field 'cs_pos'."""
        return self._cs_pos

    @cs_pos.setter
    def cs_pos(self, value):
        if __debug__:
            from geometry_msgs.msg import Point32
            assert \
                isinstance(value, Point32), \
                "The 'cs_pos' field must be a sub message of type 'Point32'"
        self._cs_pos = value

    @property
    def pc_pos(self):
        """Message field 'pc_pos'."""
        return self._pc_pos

    @pc_pos.setter
    def pc_pos(self, value):
        if __debug__:
            from geometry_msgs.msg import Point32
            assert \
                isinstance(value, Point32), \
                "The 'pc_pos' field must be a sub message of type 'Point32'"
        self._pc_pos = value

    @property
    def charging_station(self):
        """Message field 'charging_station'."""
        return self._charging_station

    @charging_station.setter
    def charging_station(self, value):
        if __debug__:
            from hqv_public_interface.msg import MapShape
            assert \
                isinstance(value, MapShape), \
                "The 'charging_station' field must be a sub message of type 'MapShape'"
        self._charging_station = value

    @property
    def working_areas(self):
        """Message field 'working_areas'."""
        return self._working_areas

    @working_areas.setter
    def working_areas(self, value):
        if __debug__:
            from hqv_public_interface.msg import MapShape
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, MapShape) for v in value) and
                 True), \
                "The 'working_areas' field must be a set or sequence and each value of type 'MapShape'"
        self._working_areas = value

    @property
    def transport_areas(self):
        """Message field 'transport_areas'."""
        return self._transport_areas

    @transport_areas.setter
    def transport_areas(self, value):
        if __debug__:
            from hqv_public_interface.msg import MapShape
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, MapShape) for v in value) and
                 True), \
                "The 'transport_areas' field must be a set or sequence and each value of type 'MapShape'"
        self._transport_areas = value

    @property
    def forbidden_areas(self):
        """Message field 'forbidden_areas'."""
        return self._forbidden_areas

    @forbidden_areas.setter
    def forbidden_areas(self, value):
        if __debug__:
            from hqv_public_interface.msg import MapShape
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, MapShape) for v in value) and
                 True), \
                "The 'forbidden_areas' field must be a set or sequence and each value of type 'MapShape'"
        self._forbidden_areas = value

    @property
    def hidden_areas(self):
        """Message field 'hidden_areas'."""
        return self._hidden_areas

    @hidden_areas.setter
    def hidden_areas(self, value):
        if __debug__:
            from hqv_public_interface.msg import MapShape
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, MapShape) for v in value) and
                 True), \
                "The 'hidden_areas' field must be a set or sequence and each value of type 'MapShape'"
        self._hidden_areas = value

    @property
    def transport_paths(self):
        """Message field 'transport_paths'."""
        return self._transport_paths

    @transport_paths.setter
    def transport_paths(self, value):
        if __debug__:
            from hqv_public_interface.msg import MapShape
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, MapShape) for v in value) and
                 True), \
                "The 'transport_paths' field must be a set or sequence and each value of type 'MapShape'"
        self._transport_paths = value

    @property
    def poi_paths(self):
        """Message field 'poi_paths'."""
        return self._poi_paths

    @poi_paths.setter
    def poi_paths(self, value):
        if __debug__:
            from hqv_public_interface.msg import MapShape
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 all(isinstance(v, MapShape) for v in value) and
                 True), \
                "The 'poi_paths' field must be a set or sequence and each value of type 'MapShape'"
        self._poi_paths = value
