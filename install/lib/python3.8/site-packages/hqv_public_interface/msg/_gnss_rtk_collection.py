# generated from rosidl_generator_py/resource/_idl.py.em
# with input from hqv_public_interface:msg/GnssRtkCollection.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_GnssRtkCollection(type):
    """Metaclass of message 'GnssRtkCollection'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('hqv_public_interface')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'hqv_public_interface.msg.GnssRtkCollection')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__gnss_rtk_collection
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__gnss_rtk_collection
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__gnss_rtk_collection
            cls._TYPE_SUPPORT = module.type_support_msg__msg__gnss_rtk_collection
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__gnss_rtk_collection

            from std_msgs.msg import Header
            if Header.__class__._TYPE_SUPPORT is None:
                Header.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
        }


class GnssRtkCollection(metaclass=Metaclass_GnssRtkCollection):
    """Message class 'GnssRtkCollection'."""

    __slots__ = [
        '_header',
        '_time_ms',
        '_ref_station_id',
        '_i_tow',
        '_rel_pos_n',
        '_rel_pos_e',
        '_rel_pos_d',
        '_rel_pos_hpn',
        '_rel_pos_hpe',
        '_rel_pos_hpd',
        '_acc_n',
        '_acc_e',
        '_acc_d',
        '_flags',
        '_year',
        '_month',
        '_day',
        '_hour',
        '_min',
        '_sec',
        '_validity_flags',
        '_t_acc',
        '_fix_type',
        '_fix_status_flags',
        '_flags2',
        '_num_sv',
        '_lon',
        '_lat',
        '_height',
        '_h_msl',
        '_h_acc',
        '_v_acc',
        '_vel_n',
        '_vel_e',
        '_vel_d',
        '_g_speed',
        '_head_mot',
        '_s_acc',
        '_head_acc',
    ]

    _fields_and_field_types = {
        'header': 'std_msgs/Header',
        'time_ms': 'uint64',
        'ref_station_id': 'uint16',
        'i_tow': 'uint32',
        'rel_pos_n': 'int32',
        'rel_pos_e': 'int32',
        'rel_pos_d': 'int32',
        'rel_pos_hpn': 'int8',
        'rel_pos_hpe': 'int8',
        'rel_pos_hpd': 'int8',
        'acc_n': 'uint32',
        'acc_e': 'uint32',
        'acc_d': 'uint32',
        'flags': 'uint32',
        'year': 'uint16',
        'month': 'uint8',
        'day': 'uint8',
        'hour': 'uint8',
        'min': 'uint8',
        'sec': 'uint8',
        'validity_flags': 'uint8',
        't_acc': 'uint32',
        'fix_type': 'uint8',
        'fix_status_flags': 'uint8',
        'flags2': 'uint8',
        'num_sv': 'uint8',
        'lon': 'int32',
        'lat': 'int32',
        'height': 'int32',
        'h_msl': 'int32',
        'h_acc': 'uint32',
        'v_acc': 'uint32',
        'vel_n': 'int32',
        'vel_e': 'int32',
        'vel_d': 'int32',
        'g_speed': 'int32',
        'head_mot': 'int32',
        's_acc': 'uint32',
        'head_acc': 'uint32',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.NamespacedType(['std_msgs', 'msg'], 'Header'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint64'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int8'),  # noqa: E501
        rosidl_parser.definition.BasicType('int8'),  # noqa: E501
        rosidl_parser.definition.BasicType('int8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint16'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        from std_msgs.msg import Header
        self.header = kwargs.get('header', Header())
        self.time_ms = kwargs.get('time_ms', int())
        self.ref_station_id = kwargs.get('ref_station_id', int())
        self.i_tow = kwargs.get('i_tow', int())
        self.rel_pos_n = kwargs.get('rel_pos_n', int())
        self.rel_pos_e = kwargs.get('rel_pos_e', int())
        self.rel_pos_d = kwargs.get('rel_pos_d', int())
        self.rel_pos_hpn = kwargs.get('rel_pos_hpn', int())
        self.rel_pos_hpe = kwargs.get('rel_pos_hpe', int())
        self.rel_pos_hpd = kwargs.get('rel_pos_hpd', int())
        self.acc_n = kwargs.get('acc_n', int())
        self.acc_e = kwargs.get('acc_e', int())
        self.acc_d = kwargs.get('acc_d', int())
        self.flags = kwargs.get('flags', int())
        self.year = kwargs.get('year', int())
        self.month = kwargs.get('month', int())
        self.day = kwargs.get('day', int())
        self.hour = kwargs.get('hour', int())
        self.min = kwargs.get('min', int())
        self.sec = kwargs.get('sec', int())
        self.validity_flags = kwargs.get('validity_flags', int())
        self.t_acc = kwargs.get('t_acc', int())
        self.fix_type = kwargs.get('fix_type', int())
        self.fix_status_flags = kwargs.get('fix_status_flags', int())
        self.flags2 = kwargs.get('flags2', int())
        self.num_sv = kwargs.get('num_sv', int())
        self.lon = kwargs.get('lon', int())
        self.lat = kwargs.get('lat', int())
        self.height = kwargs.get('height', int())
        self.h_msl = kwargs.get('h_msl', int())
        self.h_acc = kwargs.get('h_acc', int())
        self.v_acc = kwargs.get('v_acc', int())
        self.vel_n = kwargs.get('vel_n', int())
        self.vel_e = kwargs.get('vel_e', int())
        self.vel_d = kwargs.get('vel_d', int())
        self.g_speed = kwargs.get('g_speed', int())
        self.head_mot = kwargs.get('head_mot', int())
        self.s_acc = kwargs.get('s_acc', int())
        self.head_acc = kwargs.get('head_acc', int())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.header != other.header:
            return False
        if self.time_ms != other.time_ms:
            return False
        if self.ref_station_id != other.ref_station_id:
            return False
        if self.i_tow != other.i_tow:
            return False
        if self.rel_pos_n != other.rel_pos_n:
            return False
        if self.rel_pos_e != other.rel_pos_e:
            return False
        if self.rel_pos_d != other.rel_pos_d:
            return False
        if self.rel_pos_hpn != other.rel_pos_hpn:
            return False
        if self.rel_pos_hpe != other.rel_pos_hpe:
            return False
        if self.rel_pos_hpd != other.rel_pos_hpd:
            return False
        if self.acc_n != other.acc_n:
            return False
        if self.acc_e != other.acc_e:
            return False
        if self.acc_d != other.acc_d:
            return False
        if self.flags != other.flags:
            return False
        if self.year != other.year:
            return False
        if self.month != other.month:
            return False
        if self.day != other.day:
            return False
        if self.hour != other.hour:
            return False
        if self.min != other.min:
            return False
        if self.sec != other.sec:
            return False
        if self.validity_flags != other.validity_flags:
            return False
        if self.t_acc != other.t_acc:
            return False
        if self.fix_type != other.fix_type:
            return False
        if self.fix_status_flags != other.fix_status_flags:
            return False
        if self.flags2 != other.flags2:
            return False
        if self.num_sv != other.num_sv:
            return False
        if self.lon != other.lon:
            return False
        if self.lat != other.lat:
            return False
        if self.height != other.height:
            return False
        if self.h_msl != other.h_msl:
            return False
        if self.h_acc != other.h_acc:
            return False
        if self.v_acc != other.v_acc:
            return False
        if self.vel_n != other.vel_n:
            return False
        if self.vel_e != other.vel_e:
            return False
        if self.vel_d != other.vel_d:
            return False
        if self.g_speed != other.g_speed:
            return False
        if self.head_mot != other.head_mot:
            return False
        if self.s_acc != other.s_acc:
            return False
        if self.head_acc != other.head_acc:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def header(self):
        """Message field 'header'."""
        return self._header

    @header.setter
    def header(self, value):
        if __debug__:
            from std_msgs.msg import Header
            assert \
                isinstance(value, Header), \
                "The 'header' field must be a sub message of type 'Header'"
        self._header = value

    @property
    def time_ms(self):
        """Message field 'time_ms'."""
        return self._time_ms

    @time_ms.setter
    def time_ms(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'time_ms' field must be of type 'int'"
            assert value >= 0 and value < 18446744073709551616, \
                "The 'time_ms' field must be an unsigned integer in [0, 18446744073709551615]"
        self._time_ms = value

    @property
    def ref_station_id(self):
        """Message field 'ref_station_id'."""
        return self._ref_station_id

    @ref_station_id.setter
    def ref_station_id(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'ref_station_id' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 'ref_station_id' field must be an unsigned integer in [0, 65535]"
        self._ref_station_id = value

    @property
    def i_tow(self):
        """Message field 'i_tow'."""
        return self._i_tow

    @i_tow.setter
    def i_tow(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'i_tow' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'i_tow' field must be an unsigned integer in [0, 4294967295]"
        self._i_tow = value

    @property
    def rel_pos_n(self):
        """Message field 'rel_pos_n'."""
        return self._rel_pos_n

    @rel_pos_n.setter
    def rel_pos_n(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'rel_pos_n' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'rel_pos_n' field must be an integer in [-2147483648, 2147483647]"
        self._rel_pos_n = value

    @property
    def rel_pos_e(self):
        """Message field 'rel_pos_e'."""
        return self._rel_pos_e

    @rel_pos_e.setter
    def rel_pos_e(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'rel_pos_e' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'rel_pos_e' field must be an integer in [-2147483648, 2147483647]"
        self._rel_pos_e = value

    @property
    def rel_pos_d(self):
        """Message field 'rel_pos_d'."""
        return self._rel_pos_d

    @rel_pos_d.setter
    def rel_pos_d(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'rel_pos_d' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'rel_pos_d' field must be an integer in [-2147483648, 2147483647]"
        self._rel_pos_d = value

    @property
    def rel_pos_hpn(self):
        """Message field 'rel_pos_hpn'."""
        return self._rel_pos_hpn

    @rel_pos_hpn.setter
    def rel_pos_hpn(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'rel_pos_hpn' field must be of type 'int'"
            assert value >= -128 and value < 128, \
                "The 'rel_pos_hpn' field must be an integer in [-128, 127]"
        self._rel_pos_hpn = value

    @property
    def rel_pos_hpe(self):
        """Message field 'rel_pos_hpe'."""
        return self._rel_pos_hpe

    @rel_pos_hpe.setter
    def rel_pos_hpe(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'rel_pos_hpe' field must be of type 'int'"
            assert value >= -128 and value < 128, \
                "The 'rel_pos_hpe' field must be an integer in [-128, 127]"
        self._rel_pos_hpe = value

    @property
    def rel_pos_hpd(self):
        """Message field 'rel_pos_hpd'."""
        return self._rel_pos_hpd

    @rel_pos_hpd.setter
    def rel_pos_hpd(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'rel_pos_hpd' field must be of type 'int'"
            assert value >= -128 and value < 128, \
                "The 'rel_pos_hpd' field must be an integer in [-128, 127]"
        self._rel_pos_hpd = value

    @property
    def acc_n(self):
        """Message field 'acc_n'."""
        return self._acc_n

    @acc_n.setter
    def acc_n(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'acc_n' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'acc_n' field must be an unsigned integer in [0, 4294967295]"
        self._acc_n = value

    @property
    def acc_e(self):
        """Message field 'acc_e'."""
        return self._acc_e

    @acc_e.setter
    def acc_e(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'acc_e' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'acc_e' field must be an unsigned integer in [0, 4294967295]"
        self._acc_e = value

    @property
    def acc_d(self):
        """Message field 'acc_d'."""
        return self._acc_d

    @acc_d.setter
    def acc_d(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'acc_d' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'acc_d' field must be an unsigned integer in [0, 4294967295]"
        self._acc_d = value

    @property
    def flags(self):
        """Message field 'flags'."""
        return self._flags

    @flags.setter
    def flags(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'flags' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'flags' field must be an unsigned integer in [0, 4294967295]"
        self._flags = value

    @property
    def year(self):
        """Message field 'year'."""
        return self._year

    @year.setter
    def year(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'year' field must be of type 'int'"
            assert value >= 0 and value < 65536, \
                "The 'year' field must be an unsigned integer in [0, 65535]"
        self._year = value

    @property
    def month(self):
        """Message field 'month'."""
        return self._month

    @month.setter
    def month(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'month' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'month' field must be an unsigned integer in [0, 255]"
        self._month = value

    @property
    def day(self):
        """Message field 'day'."""
        return self._day

    @day.setter
    def day(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'day' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'day' field must be an unsigned integer in [0, 255]"
        self._day = value

    @property
    def hour(self):
        """Message field 'hour'."""
        return self._hour

    @hour.setter
    def hour(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'hour' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'hour' field must be an unsigned integer in [0, 255]"
        self._hour = value

    @property  # noqa: A003
    def min(self):  # noqa: A003
        """Message field 'min'."""
        return self._min

    @min.setter  # noqa: A003
    def min(self, value):  # noqa: A003
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'min' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'min' field must be an unsigned integer in [0, 255]"
        self._min = value

    @property
    def sec(self):
        """Message field 'sec'."""
        return self._sec

    @sec.setter
    def sec(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'sec' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'sec' field must be an unsigned integer in [0, 255]"
        self._sec = value

    @property
    def validity_flags(self):
        """Message field 'validity_flags'."""
        return self._validity_flags

    @validity_flags.setter
    def validity_flags(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'validity_flags' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'validity_flags' field must be an unsigned integer in [0, 255]"
        self._validity_flags = value

    @property
    def t_acc(self):
        """Message field 't_acc'."""
        return self._t_acc

    @t_acc.setter
    def t_acc(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 't_acc' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 't_acc' field must be an unsigned integer in [0, 4294967295]"
        self._t_acc = value

    @property
    def fix_type(self):
        """Message field 'fix_type'."""
        return self._fix_type

    @fix_type.setter
    def fix_type(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'fix_type' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'fix_type' field must be an unsigned integer in [0, 255]"
        self._fix_type = value

    @property
    def fix_status_flags(self):
        """Message field 'fix_status_flags'."""
        return self._fix_status_flags

    @fix_status_flags.setter
    def fix_status_flags(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'fix_status_flags' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'fix_status_flags' field must be an unsigned integer in [0, 255]"
        self._fix_status_flags = value

    @property
    def flags2(self):
        """Message field 'flags2'."""
        return self._flags2

    @flags2.setter
    def flags2(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'flags2' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'flags2' field must be an unsigned integer in [0, 255]"
        self._flags2 = value

    @property
    def num_sv(self):
        """Message field 'num_sv'."""
        return self._num_sv

    @num_sv.setter
    def num_sv(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'num_sv' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'num_sv' field must be an unsigned integer in [0, 255]"
        self._num_sv = value

    @property
    def lon(self):
        """Message field 'lon'."""
        return self._lon

    @lon.setter
    def lon(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'lon' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'lon' field must be an integer in [-2147483648, 2147483647]"
        self._lon = value

    @property
    def lat(self):
        """Message field 'lat'."""
        return self._lat

    @lat.setter
    def lat(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'lat' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'lat' field must be an integer in [-2147483648, 2147483647]"
        self._lat = value

    @property
    def height(self):
        """Message field 'height'."""
        return self._height

    @height.setter
    def height(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'height' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'height' field must be an integer in [-2147483648, 2147483647]"
        self._height = value

    @property
    def h_msl(self):
        """Message field 'h_msl'."""
        return self._h_msl

    @h_msl.setter
    def h_msl(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'h_msl' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'h_msl' field must be an integer in [-2147483648, 2147483647]"
        self._h_msl = value

    @property
    def h_acc(self):
        """Message field 'h_acc'."""
        return self._h_acc

    @h_acc.setter
    def h_acc(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'h_acc' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'h_acc' field must be an unsigned integer in [0, 4294967295]"
        self._h_acc = value

    @property
    def v_acc(self):
        """Message field 'v_acc'."""
        return self._v_acc

    @v_acc.setter
    def v_acc(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'v_acc' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'v_acc' field must be an unsigned integer in [0, 4294967295]"
        self._v_acc = value

    @property
    def vel_n(self):
        """Message field 'vel_n'."""
        return self._vel_n

    @vel_n.setter
    def vel_n(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'vel_n' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'vel_n' field must be an integer in [-2147483648, 2147483647]"
        self._vel_n = value

    @property
    def vel_e(self):
        """Message field 'vel_e'."""
        return self._vel_e

    @vel_e.setter
    def vel_e(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'vel_e' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'vel_e' field must be an integer in [-2147483648, 2147483647]"
        self._vel_e = value

    @property
    def vel_d(self):
        """Message field 'vel_d'."""
        return self._vel_d

    @vel_d.setter
    def vel_d(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'vel_d' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'vel_d' field must be an integer in [-2147483648, 2147483647]"
        self._vel_d = value

    @property
    def g_speed(self):
        """Message field 'g_speed'."""
        return self._g_speed

    @g_speed.setter
    def g_speed(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'g_speed' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'g_speed' field must be an integer in [-2147483648, 2147483647]"
        self._g_speed = value

    @property
    def head_mot(self):
        """Message field 'head_mot'."""
        return self._head_mot

    @head_mot.setter
    def head_mot(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'head_mot' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'head_mot' field must be an integer in [-2147483648, 2147483647]"
        self._head_mot = value

    @property
    def s_acc(self):
        """Message field 's_acc'."""
        return self._s_acc

    @s_acc.setter
    def s_acc(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 's_acc' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 's_acc' field must be an unsigned integer in [0, 4294967295]"
        self._s_acc = value

    @property
    def head_acc(self):
        """Message field 'head_acc'."""
        return self._head_acc

    @head_acc.setter
    def head_acc(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'head_acc' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'head_acc' field must be an unsigned integer in [0, 4294967295]"
        self._head_acc = value
