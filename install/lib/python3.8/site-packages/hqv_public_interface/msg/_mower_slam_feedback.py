# generated from rosidl_generator_py/resource/_idl.py.em
# with input from hqv_public_interface:msg/MowerSlamFeedback.idl
# generated code does not contain a copyright notice


# Import statements for member types

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_MowerSlamFeedback(type):
    """Metaclass of message 'MowerSlamFeedback'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
        'FEEDBACK_NORMAL': 0,
        'FEEDBACK_FULL_STOP': 1,
        'FEEDBACK_TURN_IN_PLACE': 2,
        'FEEDBACK_ADAPT_MAX_VELOCITY': 3,
        'FEEDBACK_CHANGE_HEADING': 4,
        'FEEDBACK_DRIVE_STRAIGHT': 5,
        'FEEDBACK_DRIVE_TO': 6,
        'FEEDBACK_CALIBRATION_DONE': 7,
        'FEEDBACK_RTK_ANOMALY': 8,
        'FEEDBACK_UNKNOWN': 9,
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('hqv_public_interface')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'hqv_public_interface.msg.MowerSlamFeedback')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__mower_slam_feedback
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__mower_slam_feedback
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__mower_slam_feedback
            cls._TYPE_SUPPORT = module.type_support_msg__msg__mower_slam_feedback
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__mower_slam_feedback

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
            'FEEDBACK_NORMAL': cls.__constants['FEEDBACK_NORMAL'],
            'FEEDBACK_FULL_STOP': cls.__constants['FEEDBACK_FULL_STOP'],
            'FEEDBACK_TURN_IN_PLACE': cls.__constants['FEEDBACK_TURN_IN_PLACE'],
            'FEEDBACK_ADAPT_MAX_VELOCITY': cls.__constants['FEEDBACK_ADAPT_MAX_VELOCITY'],
            'FEEDBACK_CHANGE_HEADING': cls.__constants['FEEDBACK_CHANGE_HEADING'],
            'FEEDBACK_DRIVE_STRAIGHT': cls.__constants['FEEDBACK_DRIVE_STRAIGHT'],
            'FEEDBACK_DRIVE_TO': cls.__constants['FEEDBACK_DRIVE_TO'],
            'FEEDBACK_CALIBRATION_DONE': cls.__constants['FEEDBACK_CALIBRATION_DONE'],
            'FEEDBACK_RTK_ANOMALY': cls.__constants['FEEDBACK_RTK_ANOMALY'],
            'FEEDBACK_UNKNOWN': cls.__constants['FEEDBACK_UNKNOWN'],
        }

    @property
    def FEEDBACK_NORMAL(self):
        """Message constant 'FEEDBACK_NORMAL'."""
        return Metaclass_MowerSlamFeedback.__constants['FEEDBACK_NORMAL']

    @property
    def FEEDBACK_FULL_STOP(self):
        """Message constant 'FEEDBACK_FULL_STOP'."""
        return Metaclass_MowerSlamFeedback.__constants['FEEDBACK_FULL_STOP']

    @property
    def FEEDBACK_TURN_IN_PLACE(self):
        """Message constant 'FEEDBACK_TURN_IN_PLACE'."""
        return Metaclass_MowerSlamFeedback.__constants['FEEDBACK_TURN_IN_PLACE']

    @property
    def FEEDBACK_ADAPT_MAX_VELOCITY(self):
        """Message constant 'FEEDBACK_ADAPT_MAX_VELOCITY'."""
        return Metaclass_MowerSlamFeedback.__constants['FEEDBACK_ADAPT_MAX_VELOCITY']

    @property
    def FEEDBACK_CHANGE_HEADING(self):
        """Message constant 'FEEDBACK_CHANGE_HEADING'."""
        return Metaclass_MowerSlamFeedback.__constants['FEEDBACK_CHANGE_HEADING']

    @property
    def FEEDBACK_DRIVE_STRAIGHT(self):
        """Message constant 'FEEDBACK_DRIVE_STRAIGHT'."""
        return Metaclass_MowerSlamFeedback.__constants['FEEDBACK_DRIVE_STRAIGHT']

    @property
    def FEEDBACK_DRIVE_TO(self):
        """Message constant 'FEEDBACK_DRIVE_TO'."""
        return Metaclass_MowerSlamFeedback.__constants['FEEDBACK_DRIVE_TO']

    @property
    def FEEDBACK_CALIBRATION_DONE(self):
        """Message constant 'FEEDBACK_CALIBRATION_DONE'."""
        return Metaclass_MowerSlamFeedback.__constants['FEEDBACK_CALIBRATION_DONE']

    @property
    def FEEDBACK_RTK_ANOMALY(self):
        """Message constant 'FEEDBACK_RTK_ANOMALY'."""
        return Metaclass_MowerSlamFeedback.__constants['FEEDBACK_RTK_ANOMALY']

    @property
    def FEEDBACK_UNKNOWN(self):
        """Message constant 'FEEDBACK_UNKNOWN'."""
        return Metaclass_MowerSlamFeedback.__constants['FEEDBACK_UNKNOWN']


class MowerSlamFeedback(metaclass=Metaclass_MowerSlamFeedback):
    """
    Message class 'MowerSlamFeedback'.

    Constants:
      FEEDBACK_NORMAL
      FEEDBACK_FULL_STOP
      FEEDBACK_TURN_IN_PLACE
      FEEDBACK_ADAPT_MAX_VELOCITY
      FEEDBACK_CHANGE_HEADING
      FEEDBACK_DRIVE_STRAIGHT
      FEEDBACK_DRIVE_TO
      FEEDBACK_CALIBRATION_DONE
      FEEDBACK_RTK_ANOMALY
      FEEDBACK_UNKNOWN
    """

    __slots__ = [
        '_feedback',
        '_feedback_data_1',
        '_feedback_data_2',
    ]

    _fields_and_field_types = {
        'feedback': 'uint8',
        'feedback_data_1': 'int32',
        'feedback_data_2': 'int32',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.BasicType('uint8'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
        rosidl_parser.definition.BasicType('int32'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        self.feedback = kwargs.get('feedback', int())
        self.feedback_data_1 = kwargs.get('feedback_data_1', int())
        self.feedback_data_2 = kwargs.get('feedback_data_2', int())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.feedback != other.feedback:
            return False
        if self.feedback_data_1 != other.feedback_data_1:
            return False
        if self.feedback_data_2 != other.feedback_data_2:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def feedback(self):
        """Message field 'feedback'."""
        return self._feedback

    @feedback.setter
    def feedback(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'feedback' field must be of type 'int'"
            assert value >= 0 and value < 256, \
                "The 'feedback' field must be an unsigned integer in [0, 255]"
        self._feedback = value

    @property
    def feedback_data_1(self):
        """Message field 'feedback_data_1'."""
        return self._feedback_data_1

    @feedback_data_1.setter
    def feedback_data_1(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'feedback_data_1' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'feedback_data_1' field must be an integer in [-2147483648, 2147483647]"
        self._feedback_data_1 = value

    @property
    def feedback_data_2(self):
        """Message field 'feedback_data_2'."""
        return self._feedback_data_2

    @feedback_data_2.setter
    def feedback_data_2(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'feedback_data_2' field must be of type 'int'"
            assert value >= -2147483648 and value < 2147483648, \
                "The 'feedback_data_2' field must be an integer in [-2147483648, 2147483647]"
        self._feedback_data_2 = value
