# generated from rosidl_generator_py/resource/_idl.py.em
# with input from hqv_public_interface:msg/MapShape.idl
# generated code does not contain a copyright notice


# Import statements for member types

# Member 'id'
import numpy  # noqa: E402, I100

import rosidl_parser.definition  # noqa: E402, I100


class Metaclass_MapShape(type):
    """Metaclass of message 'MapShape'."""

    _CREATE_ROS_MESSAGE = None
    _CONVERT_FROM_PY = None
    _CONVERT_TO_PY = None
    _DESTROY_ROS_MESSAGE = None
    _TYPE_SUPPORT = None

    __constants = {
        'UNDEFIED_AREA': -1,
        'WORKING_AREA': 0,
        'TRANSPORT_AREA': 1,
        'FORBIDDEN_AREA': 2,
        'HIDDEN_AREA': 3,
        'TRANSPORT_PATH': 4,
        'POINTS_OF_INTEREST_PATH': 5,
        'CHARGING_STATION_PATH': 6,
    }

    @classmethod
    def __import_type_support__(cls):
        try:
            from rosidl_generator_py import import_type_support
            module = import_type_support('hqv_public_interface')
        except ImportError:
            import logging
            import traceback
            logger = logging.getLogger(
                'hqv_public_interface.msg.MapShape')
            logger.debug(
                'Failed to import needed modules for type support:\n' +
                traceback.format_exc())
        else:
            cls._CREATE_ROS_MESSAGE = module.create_ros_message_msg__msg__map_shape
            cls._CONVERT_FROM_PY = module.convert_from_py_msg__msg__map_shape
            cls._CONVERT_TO_PY = module.convert_to_py_msg__msg__map_shape
            cls._TYPE_SUPPORT = module.type_support_msg__msg__map_shape
            cls._DESTROY_ROS_MESSAGE = module.destroy_ros_message_msg__msg__map_shape

            from geometry_msgs.msg import Polygon
            if Polygon.__class__._TYPE_SUPPORT is None:
                Polygon.__class__.__import_type_support__()

    @classmethod
    def __prepare__(cls, name, bases, **kwargs):
        # list constant names here so that they appear in the help text of
        # the message class under "Data and other attributes defined here:"
        # as well as populate each message instance
        return {
            'UNDEFIED_AREA': cls.__constants['UNDEFIED_AREA'],
            'WORKING_AREA': cls.__constants['WORKING_AREA'],
            'TRANSPORT_AREA': cls.__constants['TRANSPORT_AREA'],
            'FORBIDDEN_AREA': cls.__constants['FORBIDDEN_AREA'],
            'HIDDEN_AREA': cls.__constants['HIDDEN_AREA'],
            'TRANSPORT_PATH': cls.__constants['TRANSPORT_PATH'],
            'POINTS_OF_INTEREST_PATH': cls.__constants['POINTS_OF_INTEREST_PATH'],
            'CHARGING_STATION_PATH': cls.__constants['CHARGING_STATION_PATH'],
        }

    @property
    def UNDEFIED_AREA(self):
        """Message constant 'UNDEFIED_AREA'."""
        return Metaclass_MapShape.__constants['UNDEFIED_AREA']

    @property
    def WORKING_AREA(self):
        """Message constant 'WORKING_AREA'."""
        return Metaclass_MapShape.__constants['WORKING_AREA']

    @property
    def TRANSPORT_AREA(self):
        """Message constant 'TRANSPORT_AREA'."""
        return Metaclass_MapShape.__constants['TRANSPORT_AREA']

    @property
    def FORBIDDEN_AREA(self):
        """Message constant 'FORBIDDEN_AREA'."""
        return Metaclass_MapShape.__constants['FORBIDDEN_AREA']

    @property
    def HIDDEN_AREA(self):
        """Message constant 'HIDDEN_AREA'."""
        return Metaclass_MapShape.__constants['HIDDEN_AREA']

    @property
    def TRANSPORT_PATH(self):
        """Message constant 'TRANSPORT_PATH'."""
        return Metaclass_MapShape.__constants['TRANSPORT_PATH']

    @property
    def POINTS_OF_INTEREST_PATH(self):
        """Message constant 'POINTS_OF_INTEREST_PATH'."""
        return Metaclass_MapShape.__constants['POINTS_OF_INTEREST_PATH']

    @property
    def CHARGING_STATION_PATH(self):
        """Message constant 'CHARGING_STATION_PATH'."""
        return Metaclass_MapShape.__constants['CHARGING_STATION_PATH']


class MapShape(metaclass=Metaclass_MapShape):
    """
    Message class 'MapShape'.

    Constants:
      UNDEFIED_AREA
      WORKING_AREA
      TRANSPORT_AREA
      FORBIDDEN_AREA
      HIDDEN_AREA
      TRANSPORT_PATH
      POINTS_OF_INTEREST_PATH
      CHARGING_STATION_PATH
    """

    __slots__ = [
        '_polygon',
        '_id',
        '_type',
        '_stroke_color',
        '_fill_color',
        '_hidden',
    ]

    _fields_and_field_types = {
        'polygon': 'geometry_msgs/Polygon',
        'id': 'uint8[64]',
        'type': 'int8',
        'stroke_color': 'uint32',
        'fill_color': 'uint32',
        'hidden': 'boolean',
    }

    SLOT_TYPES = (
        rosidl_parser.definition.NamespacedType(['geometry_msgs', 'msg'], 'Polygon'),  # noqa: E501
        rosidl_parser.definition.Array(rosidl_parser.definition.BasicType('uint8'), 64),  # noqa: E501
        rosidl_parser.definition.BasicType('int8'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.BasicType('uint32'),  # noqa: E501
        rosidl_parser.definition.BasicType('boolean'),  # noqa: E501
    )

    def __init__(self, **kwargs):
        assert all('_' + key in self.__slots__ for key in kwargs.keys()), \
            'Invalid arguments passed to constructor: %s' % \
            ', '.join(sorted(k for k in kwargs.keys() if '_' + k not in self.__slots__))
        from geometry_msgs.msg import Polygon
        self.polygon = kwargs.get('polygon', Polygon())
        if 'id' not in kwargs:
            self.id = numpy.zeros(64, dtype=numpy.uint8)
        else:
            self.id = numpy.array(kwargs.get('id'), dtype=numpy.uint8)
            assert self.id.shape == (64, )
        self.type = kwargs.get('type', int())
        self.stroke_color = kwargs.get('stroke_color', int())
        self.fill_color = kwargs.get('fill_color', int())
        self.hidden = kwargs.get('hidden', bool())

    def __repr__(self):
        typename = self.__class__.__module__.split('.')
        typename.pop()
        typename.append(self.__class__.__name__)
        args = []
        for s, t in zip(self.__slots__, self.SLOT_TYPES):
            field = getattr(self, s)
            fieldstr = repr(field)
            # We use Python array type for fields that can be directly stored
            # in them, and "normal" sequences for everything else.  If it is
            # a type that we store in an array, strip off the 'array' portion.
            if (
                isinstance(t, rosidl_parser.definition.AbstractSequence) and
                isinstance(t.value_type, rosidl_parser.definition.BasicType) and
                t.value_type.typename in ['float', 'double', 'int8', 'uint8', 'int16', 'uint16', 'int32', 'uint32', 'int64', 'uint64']
            ):
                if len(field) == 0:
                    fieldstr = '[]'
                else:
                    assert fieldstr.startswith('array(')
                    prefix = "array('X', "
                    suffix = ')'
                    fieldstr = fieldstr[len(prefix):-len(suffix)]
            args.append(s[1:] + '=' + fieldstr)
        return '%s(%s)' % ('.'.join(typename), ', '.join(args))

    def __eq__(self, other):
        if not isinstance(other, self.__class__):
            return False
        if self.polygon != other.polygon:
            return False
        if all(self.id != other.id):
            return False
        if self.type != other.type:
            return False
        if self.stroke_color != other.stroke_color:
            return False
        if self.fill_color != other.fill_color:
            return False
        if self.hidden != other.hidden:
            return False
        return True

    @classmethod
    def get_fields_and_field_types(cls):
        from copy import copy
        return copy(cls._fields_and_field_types)

    @property
    def polygon(self):
        """Message field 'polygon'."""
        return self._polygon

    @polygon.setter
    def polygon(self, value):
        if __debug__:
            from geometry_msgs.msg import Polygon
            assert \
                isinstance(value, Polygon), \
                "The 'polygon' field must be a sub message of type 'Polygon'"
        self._polygon = value

    @property  # noqa: A003
    def id(self):  # noqa: A003
        """Message field 'id'."""
        return self._id

    @id.setter  # noqa: A003
    def id(self, value):  # noqa: A003
        if isinstance(value, numpy.ndarray):
            assert value.dtype == numpy.uint8, \
                "The 'id' numpy.ndarray() must have the dtype of 'numpy.uint8'"
            assert value.size == 64, \
                "The 'id' numpy.ndarray() must have a size of 64"
            self._id = value
            return
        if __debug__:
            from collections.abc import Sequence
            from collections.abc import Set
            from collections import UserList
            from collections import UserString
            assert \
                ((isinstance(value, Sequence) or
                  isinstance(value, Set) or
                  isinstance(value, UserList)) and
                 not isinstance(value, str) and
                 not isinstance(value, UserString) and
                 len(value) == 64 and
                 all(isinstance(v, int) for v in value) and
                 all(val >= 0 and val < 256 for val in value)), \
                "The 'id' field must be a set or sequence with length 64 and each value of type 'int' and each unsigned integer in [0, 255]"
        self._id = numpy.array(value, dtype=numpy.uint8)

    @property  # noqa: A003
    def type(self):  # noqa: A003
        """Message field 'type'."""
        return self._type

    @type.setter  # noqa: A003
    def type(self, value):  # noqa: A003
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'type' field must be of type 'int'"
            assert value >= -128 and value < 128, \
                "The 'type' field must be an integer in [-128, 127]"
        self._type = value

    @property
    def stroke_color(self):
        """Message field 'stroke_color'."""
        return self._stroke_color

    @stroke_color.setter
    def stroke_color(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'stroke_color' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'stroke_color' field must be an unsigned integer in [0, 4294967295]"
        self._stroke_color = value

    @property
    def fill_color(self):
        """Message field 'fill_color'."""
        return self._fill_color

    @fill_color.setter
    def fill_color(self, value):
        if __debug__:
            assert \
                isinstance(value, int), \
                "The 'fill_color' field must be of type 'int'"
            assert value >= 0 and value < 4294967296, \
                "The 'fill_color' field must be an unsigned integer in [0, 4294967295]"
        self._fill_color = value

    @property
    def hidden(self):
        """Message field 'hidden'."""
        return self._hidden

    @hidden.setter
    def hidden(self, value):
        if __debug__:
            assert \
                isinstance(value, bool), \
                "The 'hidden' field must be of type 'bool'"
        self._hidden = value
