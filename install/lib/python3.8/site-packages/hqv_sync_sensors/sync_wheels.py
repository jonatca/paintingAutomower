import rclpy
from hqv_sync_sensors.sync_sensors import SyncedSubscriber
from hqv_public_interface.msg import MowerWheelCounter
from hqv_public_interface.msg import MowerWheelSpeed
from hqv_public_interface.msg import WheelPair


class WheelSyncer(SyncedSubscriber):
    def __init__(self):
        name = "wheel_topic_syncer"
        super().__init__(name)

        self.declare_parameter("wheel_pair_topic", "wheel_pair_rear")
        self.wheel_pair_topic_ = self.get_parameter("wheel_pair_topic").value

        self.declare_parameter("wheel_left_topic", "/hqv_mower/wheel0")
        self.wheel_left_topic_ = self.get_parameter("wheel_left_topic").value

        self.declare_parameter("wheel_right_topic", "/hqv_mower/wheel1")
        self.wheel_right_topic_ = self.get_parameter("wheel_right_topic").value

        topics = {
            self.wheel_left_topic_ + "/counter": MowerWheelCounter,
            self.wheel_right_topic_ + "/counter": MowerWheelCounter,
            self.wheel_left_topic_ + "/speed": MowerWheelSpeed,
            self.wheel_right_topic_ + "/speed": MowerWheelSpeed,
        }
        self.wheel_pair = WheelPair()
        super().start(topics, max_jitter=0.1, queue_size=10)
        self.pub_ = self.create_publisher(WheelPair, self.wheel_pair_topic_, self.queue_size_)

    def synced_callback(self, *args):
        lc, rc, ls, rs = args
        self.wheel_pair.header = lc.header
        self.wheel_pair.power_left = lc.power
        self.wheel_pair.power_right = rc.power
        self.wheel_pair.counter_left = lc.counter
        self.wheel_pair.counter_right = rc.counter
        self.wheel_pair.free_left = lc.free
        self.wheel_pair.free_right = rc.free
        self.wheel_pair.deltadistance_left = lc.deltadistance
        self.wheel_pair.deltadistance_right = rc.deltadistance
        self.wheel_pair.state_left = ls.state
        self.wheel_pair.state_right = rs.state
        self.wheel_pair.current_left = ls.current
        self.wheel_pair.current_right = rs.current
        self.wheel_pair.speed_left = ls.speed
        self.wheel_pair.speed_right = rs.speed
        self.wheel_pair.isrunning_left = ls.isrunning
        self.wheel_pair.isrunning_right = rs.isrunning

        self.pub_.publish(self.wheel_pair)


def main(args=None):
    rclpy.init(args=args)
    wheel_syncer = WheelSyncer()
    rclpy.spin(wheel_syncer)

    wheel_syncer.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()
