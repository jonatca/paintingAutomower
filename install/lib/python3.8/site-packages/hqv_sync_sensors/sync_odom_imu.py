import rclpy
from hqv_sync_sensors.sync_sensors import SyncedSubscriber
from hqv_public_interface.msg import MowerImu
from nav_msgs.msg import Odometry
import transforms3d
from geometry_msgs.msg import Vector3Stamped


class OdomImuSyncer(SyncedSubscriber):
    def __init__(self):
        name = "odom_imu_topic_syncer"
        super().__init__(name)

        topics = {
            "/hqv_mower/local_position": Odometry,
            "/hqv_mower/imu0/orientation": MowerImu,
        }

        self.declare_parameter("odom_pub_topic", "odom")
        self.odom_pub_topic_ = self.get_parameter("odom_pub_topic").value

        self.odom_ext_ = Odometry()

        super().start(topics, max_jitter=1.0, queue_size=10)
        self.pub_ = self.create_publisher(Odometry, self.odom_pub_topic_, self.queue_size_)
        self.pub_ypr = self.create_publisher(Vector3Stamped, "ypr", self.queue_size_)

    def synced_callback(self, *args):
        self.get_logger().debug("I heard a synced topic!, maybe repbulish")
        if type(args[0]) is Odometry:
            odom = 0
            imu = 1
        else:
            odom = 1
            imu = 0

        # copy data from local_position odom
        self.odom_ext_ = args[odom]

        # extract roll and pitch from imu and use for odom_ext
        roll_imu = args[imu].roll
        pitch_imu = args[imu].pitch
        quat = [args[odom].pose.pose.orientation.w,
                args[odom].pose.pose.orientation.x,
                args[odom].pose.pose.orientation.y,
                args[odom].pose.pose.orientation.z]
        ypr_local_position = transforms3d.taitbryan.quat2euler(quat)
        yaw_local_position = ypr_local_position[0]
        quat = transforms3d.euler.euler2quat(yaw_local_position,
                                             pitch_imu,
                                             roll_imu,
                                             axes='rzyx')
        self.odom_ext_.pose.pose.orientation.w = quat[0]
        self.odom_ext_.pose.pose.orientation.x = quat[1]
        self.odom_ext_.pose.pose.orientation.y = quat[2]
        self.odom_ext_.pose.pose.orientation.z = quat[3]

        self.pub_.publish(self.odom_ext_)

        ypr = Vector3Stamped()
        ypr.header = self.odom_ext_.header
        ypr.vector.x = roll_imu
        ypr.vector.y = pitch_imu
        ypr.vector.z = yaw_local_position
        self.pub_ypr.publish(ypr)


def main(args=None):
    rclpy.init(args=args)
    odom_imu_syncer = OdomImuSyncer()
    rclpy.spin(odom_imu_syncer)

    odom_imu_syncer.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()
