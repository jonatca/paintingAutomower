import rclpy
from hqv_sync_sensors.sync_sensors import SyncedSubscriber
from hqv_public_interface.msg import MowerGnssPvtRaw
from hqv_public_interface.msg import MowerGnssRtkRelPosNEDRaw
from hqv_public_interface.msg import GnssRtkCollection


class GnssRtkSyncer(SyncedSubscriber):
    def __init__(self):
        name = "gnss_rtk_topic_syncer"
        super().__init__(name)

        self.declare_parameter("gnss_pvt_raw_topic", "/hqv_mower/gnss/pvt_raw")
        self.gnss_pvt_raw_topic_ = self.get_parameter("gnss_pvt_raw_topic").value

        self.declare_parameter("gnss_rtk_rel_pos_ned_raw_topic", "/hqv_mower/gnss_rtk/rel_ned_raw")
        self.gnss_rtk_rel_pos_ned_topic_ = self.get_parameter(
            "gnss_rtk_rel_pos_ned_raw_topic").value

        self.declare_parameter("gnss_rtk_collection_topic", "gnss_rtk")
        self.gnss_rtk_collection_topic_ = self.get_parameter("gnss_rtk_collection_topic").value

        topics = {
            self.gnss_pvt_raw_topic_: MowerGnssPvtRaw,
            self.gnss_rtk_rel_pos_ned_topic_: MowerGnssRtkRelPosNEDRaw,
        }
        self.gnss_rtk_collection_ = GnssRtkCollection()
        super().start(topics, max_jitter=0.1, queue_size=10)
        self.pub_ = self.create_publisher(
            GnssRtkCollection, self.gnss_rtk_collection_topic_, self.queue_size_)

    def synced_callback(self, *args):
        pvt_raw, rel_pos_ned_raw = args

        self.gnss_rtk_collection_.header = rel_pos_ned_raw.header
        """#### RelPosNED ####"""
        self.gnss_rtk_collection_.time_ms = rel_pos_ned_raw.time_ms
        self.gnss_rtk_collection_.ref_station_id = rel_pos_ned_raw.ref_station_id
        self.gnss_rtk_collection_.i_tow = rel_pos_ned_raw.i_tow
        self.gnss_rtk_collection_.rel_pos_n = rel_pos_ned_raw.rel_pos_n
        self.gnss_rtk_collection_.rel_pos_e = rel_pos_ned_raw.rel_pos_e
        self.gnss_rtk_collection_.rel_pos_d = rel_pos_ned_raw.rel_pos_d
        self.gnss_rtk_collection_.rel_pos_hpn = rel_pos_ned_raw.rel_pos_hpn
        self.gnss_rtk_collection_.rel_pos_hpe = rel_pos_ned_raw.rel_pos_hpe
        self.gnss_rtk_collection_.rel_pos_hpd = rel_pos_ned_raw.rel_pos_hpd
        self.gnss_rtk_collection_.acc_n = rel_pos_ned_raw.acc_n
        self.gnss_rtk_collection_.acc_e = rel_pos_ned_raw.acc_e
        self.gnss_rtk_collection_.acc_d = rel_pos_ned_raw.acc_d
        self.gnss_rtk_collection_.flags = rel_pos_ned_raw.flags

        """#### PVT ####"""
        self.gnss_rtk_collection_.year = pvt_raw.year
        self.gnss_rtk_collection_.month = pvt_raw.month
        self.gnss_rtk_collection_.day = pvt_raw.day
        self.gnss_rtk_collection_.hour = pvt_raw.hour
        self.gnss_rtk_collection_.min = pvt_raw.min
        self.gnss_rtk_collection_.sec = pvt_raw.sec
        self.gnss_rtk_collection_.validity_flags = pvt_raw.validity_flags
        self.gnss_rtk_collection_.t_acc = pvt_raw.t_acc
        self.gnss_rtk_collection_.fix_type = pvt_raw.fix_type
        self.gnss_rtk_collection_.fix_status_flags = pvt_raw.fix_status_flags
        self.gnss_rtk_collection_.flags2 = pvt_raw.flags2
        self.gnss_rtk_collection_.num_sv = pvt_raw.num_sv
        self.gnss_rtk_collection_.lon = pvt_raw.lon
        self.gnss_rtk_collection_.lat = pvt_raw.lat
        self.gnss_rtk_collection_.height = pvt_raw.height
        self.gnss_rtk_collection_.h_msl = pvt_raw.h_msl
        self.gnss_rtk_collection_.h_acc = pvt_raw.h_acc
        self.gnss_rtk_collection_.v_acc = pvt_raw.v_acc
        self.gnss_rtk_collection_.vel_n = pvt_raw.vel_n
        self.gnss_rtk_collection_.vel_e = pvt_raw.vel_e
        self.gnss_rtk_collection_.vel_d = pvt_raw.vel_d
        self.gnss_rtk_collection_.g_speed = pvt_raw.g_speed
        self.gnss_rtk_collection_.head_mot = pvt_raw.head_mot
        self.gnss_rtk_collection_.s_acc = pvt_raw.s_acc
        self.gnss_rtk_collection_.head_acc = pvt_raw.head_acc

        self.pub_.publish(self.gnss_rtk_collection_)


def main(args=None):
    rclpy.init(args=args)
    gnss_rtk_topic_syncer = GnssRtkSyncer()
    rclpy.spin(gnss_rtk_topic_syncer)

    gnss_rtk_topic_syncer.destroy_node()
    rclpy.shutdown()


if __name__ == "__main__":
    main()
