from rclpy.node import Node
import message_filters


class SyncedSubscriber(Node):
    def __init__(self, name):
        self.name = name
        super().__init__(name)

    def start(self, synced_topics, max_jitter, queue_size):
        self.sync_subs = []

        self.declare_parameter("max_jitter", max_jitter)
        self.declare_parameter("queue_size", queue_size)
        self.max_jitter_ = self.get_parameter("max_jitter").value
        self.queue_size_ = self.get_parameter("queue_size").value

        for topic, msg_type in synced_topics.items():
            self.sync_subs.append(message_filters.Subscriber(self, msg_type, topic))

        if self.max_jitter_ == 0:
            self.synchronizer = message_filters.TimeSynchronizer(self.sync_subs, self.queue_size_)
        else:
            self.synchronizer = message_filters.ApproximateTimeSynchronizer(
                self.sync_subs, self.queue_size_, self.max_jitter_
            )
        self.synchronizer.registerCallback(self.synced_callback)
        self.get_logger().info(f"{self.name} started")

    def synced_callback(self, *args):
        raise NotImplementedError
