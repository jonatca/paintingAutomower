import numpy as np

import matplotlib.pyplot as plt
class EKF2D:
    def __init__(self, initial_state, initial_input, initial_covariance, process_noise): #(self, initial_state, initial_input, initial_covariance, process_noise, measurement_noise)
        self.state = initial_state   #state tre varden: x y theta
        self.input= initial_input  # tva varden v  omega
        self.P_k = initial_covariance   # vi anvander P_k istallet for bara covariance
        self.Q_k = process_noise    # state model noise, cov matrix
        self.measurement_noise = 0#measurement_noise
        self.theta = self.state[2] ### gar det gora sa?

    def get_B(self, theta, dt): #rakna ut B matris fran varden 
         B = np.array([[np.cos(theta)*dt, 0],
                      [np.sin(theta)*dt, 0],
                       [0, dt]])
         return B
    def predict(self, delta_x, delta_y, dt):     #delta om vi ska anvanda oss av position istallet for input v o w
                                                #F = np.array([
                                                #    [1, 0, dt, 0],
                                                #    [0, 1, 0, dt],
                                                #    [0, 0, 1, 0],
                                                #    [0, 0, 0, 1]
                                                #])#gammal kod
        
        #  (1): [x(k), y(k), theta(k)]^T = A * [x(k-1), y(k-1),theta(k-1)]^T + B* [v(k-1), omega(k-1)] + noise

        A = np.array([[1,0,0],
                      [0,1,0],
                      [0,0,1]])
        B = self.get_B(self.theta, dt)  #np.array([[np.cos(theta)*dt, 0],
                                                # [np.sin(theta)*dt, 0
                                                    #[0, dt]]])
        
        u = np.array([delta_x, delta_y, 0]) # u = np.array([delta_x, delta_y, np.atan2(delta_y/delta_x)])
        self.state = np.dot(A, self.state) + u
        noise= np.array([[0],[0],[0]]) # ngt ryp av noise far laggas till

        #self.state = np.dot(A, self.state) + np.dot(B, self.input) + noise #berakna state funktion med ekv (1)
       

        self.P_k = np.dot(A, np.dot(self.P_k, A.T)) + self.Q_k
        ################ predict Klar##############
    def get_state(self):
        return self.state
    
    def update_gps(self, gps_x, gps_y, measurement_noise): #fixa funktion sen?
      self.measurement_noise = np.eye(3) * measurement_noise[0]
      return self.update(gps_x, gps_y, self.measurement_noise)
    
    def update(self, gps_x, gps_y, position_covariance):
        #self.R_k= position_covariance   #covariance matris for matbara
        self.R_k = position_covariance
        # self.R_k = np.array([[182,0,0],
        #                      [0,182,0],
        #                      [0,0,182]])
        H_k = np.array([
            [1, 0, 0 ],
            [0, 1, 0 ],
            [0, 0, 1]
        ])
        yaw =0  ## lagga in data for nya sensorn med vinkel
        y_k = np.array([gps_x, gps_y, yaw]) - np.dot(H_k, self.state)   # Calculate the difference between the actual sensor measurements
                                                                        # at time k minus what the measurement model prmeaedicted 
                                                                        # the sensor measurements would be for the current timestep k.

        S_k = np.dot(H_k, np.dot(self.P_k, H_k.T)) + self.R_k           # R_k=position_covariance
        K_k = np.dot(self.P_k, np.dot(H_k.T, np.linalg.inv(S_k)))       #np.linalg.pinv??

        self.state = self.state + np.dot(K_k, y_k)
        self.P_k = self.P_k - np.dot(K_k, np.dot(H_k, self.P_k))        #uppdatera state covariance for tid k    # np.dot(np.eye(4) - np.dot(K_k, H_k), self.covariance)



# # Initialize the EKF
# initial_state = np.array([0, 0, 0])
# initial_input = np.array([0.3, 0.0])
# initial_covariance =np.array([[0.1,0,0],[0,0.1,0],[0,0,0.1]])  # np.eye(3) * 0.1 np.array([[1,0,0],[0,1,0],[0,0,1]])
# process_noise = np.eye(3) * 0.001
# position_covariance = np.eye(2) * 0.01
# measurment_noise = np.eye(4) * 0.001
# ekf = EKF2D(initial_state, initial_input, initial_covariance, process_noise) #initial_state, initial_input, initial_covariance, process_noise

# # Simulate the robot's motion with odometry and GPS measurements
# #odometry_data = [
#     # (delta_x, delta_y, dt)
#   #  (1, 0, 0.1),
#   #  (1, 0, 0.1),
#   #  (1, 0, 0.1),
#   #  (1, 0, 0.1),
#   #  (1, 0, 0.1),
#   #  (1, 0, 0.1),
#   #  (1, 0, 0.1),
#   #  (1, 0, 0.1),
#   #  (1, 0, 0.1),
#   #  (1, 0, 0.1),
# #]
# x_o=[11.054918226092598, 11.054918226092598, 11.054918226092598, 11.05820664475266, 11.070244127426802, 11.09318183191581, 11.11828726849093, 11.14008736999138, 11.168385019700564, 11.203212896265713,
#       11.230400830382049, 11.260898441181139, 11.293574452751592, 11.320824579627153, 11.349164711577737, 11.390643258962717, 11.420134593305727, 11.449644997715295, 11.481361126144858, 11.513096307740325,
#         11.54703972498717, 11.578810866296807, 11.609518404688844, 11.636921893522699, 11.668726129714452, 11.70162706370592, 11.727947810899096, 11.761961981923992, 11.791600964956945, 11.826728648551557, 11.868442772820156,
#           11.896984015740777, 11.929916219110725, 11.962848422480672, 11.994668130858802, 12.024307113891755, 12.057239317261702, 12.091253488286599, 12.12636489063488, 12.162590314341823, 12.198798948013488, 12.226216393006379,
#             12.260230564031275, 12.297536429026323, 12.32825890608107, 12.363370308429351, 12.395204771686966, 12.428136975056914, 12.461069178426861, 12.496196862021472, 12.532405495693137, 12.564239958950752, 12.594976682096037,
#               12.626825182593633, 12.655353197001611, 12.687187660259227, 12.722315343853838, 12.759638507673111, 12.792570711043059, 12.823307434188344, 12.856239637558291, 12.888059345936421, 12.920976285637934, 12.95281074889555, 
#               12.98793843249016, 13.021952603515057, 13.060373507446663, 13.095501191041274, 13.127320899419404, 13.154738344412294, 13.184363590143656, 13.218393533625935, 13.25024203412353, 13.282076497381146, 13.321595141425083,
#                 13.356722825019695, 13.390767773827468, 13.422602237085083, 13.453338960230369, 13.490662124049642, 13.521398847194927, 13.551050899382343, 13.580689882415296, 13.612509590793426, 13.64870061818404, 13.690375134573234,
#                   13.719970902513797, 13.753968534304981, 13.782482677097587, 13.827469161356321, 13.8559971757643, 13.887801411956053, 13.919621120334183, 13.951455583591798, 13.987696980709751, 14.017335963742704, 14.04807268688799,
#                     14.084314084005943, 14.135907869285527, 14.163363473162764, 14.199588896869708, 14.228130139790329, 14.261062343160276, 14.296190026754887, 14.329122230124835, 14.357663473045456, 14.389483181423586, 14.424594583771867,
#                       14.453122598179846, 14.481650612587824, 14.515648244379008, 14.558440265990976, 14.586968280398954, 14.619885220100468, 14.65280215980198, 14.685719099503494, 14.727413889792079, 14.758136366846825, 14.791053306548338,
#                         14.825083250030618, 14.861291883702282, 14.896403286050564, 14.937019670206833, 14.96995187357678, 15.002884076946728, 15.030314860031323, 15.063231799732836, 15.097261743215116, 15.13347037688678, 15.168581779235062,
#                           15.201498718936575, 15.238804583931623, 15.273915986279905, 15.302444000687883, 15.335360940389396, 15.362804443197685, 15.39901307686935, 15.427541091277329, 15.457180074310282, 15.49997209592225, 15.530694572976996,
#                             15.568000437972044, 15.603111840320325, 15.640417705315373, 15.667835150308264, 15.6985426887003, 15.736945785018733, 15.772057187367015, 15.809363052362063, 15.843392995844342, 15.871934238764963, 15.900475481685584,
#                               15.946580566403512, 15.975121809324133, 16.004747055055496, 16.04424738269731, 16.07277539710529, 16.1155466112942, 16.148447545285666, 16.180267253663796, 16.21318419336531, 16.25049005836036, 16.27793356116865, 
#                               16.30975326954678, 16.33939225257973, 16.37232445594968, 16.401949701681044, 16.431560542273367, 16.463380250651497, 16.496297190353012, 16.5237146353459, 16.561002360536232, 16.59170989892827, 16.6235296073064, 
#                               16.65314044789872, 16.682736215839284, 16.713428123333202, 16.745232359524955, 16.77263584835881, 16.802246688951133, 16.8351476229426, 16.86912794909658, 16.89762757748379, 16.931625209274973, 16.964491907181493,
#                                 16.999586236772394, 17.028100379565, 17.058807917957036, 17.093902247547938, 17.126803181539405, 17.15970411553087, 17.190411653922908, 17.22769937911324, 17.258406917505276, 17.290194964552548, 17.31980580514487, 
#                                 17.349401573085434, 17.383399204876618, 17.42288032566638, 17.45797465525728, 17.49087558924875, 17.521583127640785, 17.555563453794765, 17.581870803075265, 17.6169472687826, 17.647639176276517, 17.67836165333126,
#                                   17.70688966773924, 17.738724130996857, 17.769460854142142, 17.800197577287427, 17.833129780657377, 17.866061984027326, 17.898994187397275, 17.930813895775405, 17.959341910183383, 17.991146146375137, 
#                                   18.022965854753267, 18.060271719748314, 18.088799734156293, 18.120603970348046, 18.15022921607941, 18.180921123573327, 18.218226988568375, 18.253338390916657, 18.296109605105567, 18.32570537304613, 
#                                   18.36516639696688, 18.39258384195977, 18.423291380351806, 18.456192314343273, 18.488012022721403, 18.523123425069684, 18.55712105686087, 18.59221538645177, 18.6240350948299, 18.655869558087517,
#                                     18.69319272190679, 18.735984743518756, 18.762318295279968, 18.79634823876225, 18.829249172753716, 18.865457806425383, 18.896180283480128, 18.924679911867337, 18.955371819361254, 18.987176055553007, 
#                                     19.01677182349357, 19.047463730987488, 19.080347917588114, 19.11323210418874, 19.145036340380493, 19.17574387877253, 19.206451417164565, 19.23388220024916, 19.266799139950674, 19.301875605658008, 
#                                     19.33148644625033, 19.36330615462846, 19.394028631683206, 19.429140034031487, 19.466445899026535, 19.501557301374817, 19.542173685531086, 19.572881223923122, 19.60578215791459, 19.636457742627343,
#                                       19.668211261987295, 19.701059730290694, 19.733908198594094, 19.766756666897493, 19.801795033087785, 19.830263705617398, 19.86860818650834, 19.897092658027326, 19.92773352301605, 19.959487042376004,
#                                         19.99125818368564, 20.021933768398394, 20.053687287758347, 20.08984065545552, 20.1238209816095, 20.157818613400686, 20.18522210223454, 20.214832942826863, 20.25104157649853, 20.292736366787114, 
#                                         20.32565330648863, 20.36076470883691, 20.390375549429233, 20.4232764834207, 20.4583708130116, 20.49127174700307, 20.52086751494363, 20.558136259757674, 20.586635888144883, 20.61840702945452,
#                                           20.652350446701366, 20.68738881289166, 20.727924406976367, 20.75971245402364, 20.78929248213951, 20.818856103612568, 20.845134878255287, 20.869223755011113, 20.891096947031503, 
#                                           20.908595500647813, 20.922821616535437, 20.93703919134869, 20.952350425762962] 
# y_o=[-0.8857257607688667, -0.8857257607688667, -0.8857257607688667, -0.8860862986645114, -0.8875798762357157, -0.8907582831981872, -0.8943586347128064, -0.8976965334921241, -0.902304716460916, -0.90797632626866, -0.9125364089025321,
#       -0.9173543216436828, -0.9225163710092015, -0.9266887444833486, -0.9310280128964615, -0.936976419746702, -0.9410629429841653, -0.9450093977330962, -0.9490976429770167, -0.953035256573828, -0.9570833148057191, -0.9607194022108898, 
#       -0.9639386619915898, -0.9669431444552958, -0.9702773777995923, -0.9737265847074852, -0.9764859502337995, -0.9798886725749995, -0.9827116423364204, -0.9860573842758823, -0.9900304528289933, -0.992748868154806, -0.9958855012230515, 
#       -0.999022134291297, -1.0022053261588713, -1.0050282959202923, -1.0081649289885377, -1.0115676513297376, -1.0150801389077504, -1.0185304352828204, -1.0221526880976461, -1.0250270271875568, -1.0284297495287567, -1.0321617675803954,
#         -1.0352351942111566, -1.0387476817891694, -1.0417797604218066, -1.044916393490052, -1.0480530265582975, -1.0513987684977593, -1.055021021312585, -1.0580530999452222, -1.0609806241422515, -1.0638615211882603, -1.0667154173453957,
#           -1.0697474959780329, -1.0730932379174947, -1.0766480887281729, -1.0797847217964183, -1.0827122459934475, -1.085848879061693, -1.0890320709292671, -1.0923250280336543, -1.0953571066662915, -1.0987028486057533, -1.1021055709469532,
#             -1.1057649761932395, -1.1091107181327013, -1.1122939100002756, -1.1151682490901862, -1.1181319104841345, -1.1213730979879881, -1.124253995033997, -1.1272860736666341, -1.1310500333485287, -1.1343957752879905, -1.1374753548888965, 
#             -1.1405074335215337, -1.143434957718563, -1.1469898085292412, -1.1499173327262704, -1.152599547217382, -1.155422516978803, -1.1586057088463773, -1.1623998364450594, -1.1667688318617238, -1.1700136729225261, -1.1735778533940153, 
#             -1.1765671660475225, -1.1810675407568516, -1.183921436913987, -1.1872556702582835, -1.1904388621258577, -1.193470940758495, -1.196749202914298, -1.1995721726757191, -1.2024996968727484, -1.2057779590285516, -1.2106920175021363,
#               -1.2131755494383507, -1.2166258458134207, -1.2193442611392336, -1.222480894207479, -1.2258266361469408, -1.2289632692151862, -1.231681684540999, -1.2348648764085732, -1.238377363986586, -1.2412312601437214, -1.2440851563008568,
#                 -1.247649336772346, -1.2519301810080492, -1.2547840771651846, -1.2580770342695717, -1.2613699913739589, -1.264662948478346, -1.2688340274772363, -1.2719074541079975, -1.2752004112123847, -1.2784415987162383, -1.282063851531064,
#                   -1.2855763391090769, -1.2894448532265796, -1.292581486294825, -1.2957181193630705, -1.2984622502833931, -1.3017552073877803, -1.3049963948916339, -1.3086186477064596, -1.3121311352844724, -1.3154240923888596, -1.3191561104404983,
#                     -1.322668598018511, -1.3255224941756465, -1.3288154512800336, -1.3314293121702383, -1.335051564985064, -1.3379054611421994, -1.3407284309036205, -1.3450092751393237, -1.348082701770085, -1.3518147198217236, -1.3553272073997364,
#                       -1.3590592254513751, -1.3619335645412858, -1.3651528243219857, -1.3689946076104373, -1.3725070951884502, -1.3762391132400889, -1.3794803007439425, -1.3821987160697553, -1.3849171313955682, -1.389308417691112, -1.3920268330169248,
#                         -1.394990494410873, -1.3989420429361377, -1.401795939093273, -1.4062799080735338, -1.4097291149814266, -1.4129123068490008, -1.416205263953388, -1.4199372820050267, -1.4225511428952313, -1.4257343347628055, -1.4285573045242266,
#                           -1.431693937592472, -1.4346575989864203, -1.4377618852035239, -1.440945077071098, -1.4442380341754852, -1.4471123732653959, -1.4510214744276744, -1.4542407342083743, -1.4574239260759485, -1.460528212293052, -1.4637730533538544,
#                             -1.4671380737132051, -1.4704723070575016, -1.4734767895212075, -1.476581075738311, -1.480030282646204, -1.4837558409011993, -1.4868805026634535, -1.4904446831349427, -1.4942061528644297, -1.4978853068995155, 
#                             -1.5008746195530227, -1.5040938793337226, -1.5077730333688084, -1.5112222402767013, -1.5146714471845941, -1.517890706965294, -1.5217998081275725, -1.5250190679082725, -1.5285042675661713, -1.5316085537832749, 
#                             -1.5348533948440772, -1.5384175753155664, -1.5425566236050379, -1.5462357776401237, -1.5496849845480165, -1.5529042443287164, -1.5566298025837118, -1.5595141057488695, -1.5633598433024132, -1.566724863661764, 
#                             -1.5697982902925252, -1.5726521864496605, -1.5756842650822978, -1.578611789279327, -1.5815393134763562, -1.5846759465446016, -1.587812579612847, -1.5909492126810925, -1.5941324045486667, -1.596986300705802, 
#                             -1.6003205340500986, -1.6035037259176728, -1.6072357439693115, -1.6100896401264468, -1.6134238734707433, -1.6163875348646917, -1.6197525552240424, -1.623484573275681, -1.6269970608536939, -1.6314810298339546, 
#                             -1.634725870894757, -1.6390523256424936, -1.6419266647324042, -1.6451459245131042, -1.648595131420997, -1.6517783232885712, -1.655290810866584, -1.6588549913380732, -1.662534145373159, -1.6657173372407332, 
#                             -1.6687494158733704, -1.6723042666840486, -1.6765851109197518, -1.6792194766032615, -1.6824606641071151, -1.685909871015008, -1.6895321238298338, -1.692605550460595, -1.6957302122228493, -1.6990952325822,
#                               -1.7024294659264965, -1.7056743069872988, -1.7090393273466495, -1.7126447063030967, -1.716250085259544, -1.7195843186038404, -1.7228035783845403, -1.7260228381652403, -1.728766969085563, -1.73205992618995,
#                                 -1.7359056637434938, -1.7390099499605973, -1.7421931418281715, -1.7452665684589328, -1.7487790560369456, -1.7525110740885843, -1.7560235616665971, -1.7598920757841, -1.7631113355647998, -1.7665605424726927,
#                                   -1.7700712475535472, -1.7738581407382195, -1.777775616446501, -1.7816930921547827, -1.7856105678630643, -1.7897892086185647, -1.7931843542324089, -1.797572735583477, -1.800832676015699, -1.8046345098333099,
#                                     -1.8084214030179822, -1.812057490423153, -1.8155681955040075, -1.8193550886886798, -1.8234927053911154, -1.8272182636461107, -1.8307824441176, -1.8337869265813058, -1.8368912127984094, -1.8405134656132351,
#                                       -1.8446845446121254, -1.8479775017165125, -1.8514899892945254, -1.854594275511629, -1.8580434824195218, -1.8617226364546076, -1.8651718433625004, -1.8684166844233028, -1.872502780573943, -1.8756274423361972,
#                                         -1.879263529741368, -1.883311587973259, -1.8874902287287594, -1.89212937472846, -1.8956145743863588, -1.8989998971428972, -1.9025256252803506, -1.905659605846976, -1.9085324213663823, -1.9113519008449482,
#                                           -1.9136074844278008, -1.9153726215574058, -1.9172052832184736, -1.9191789188534696] 
# x_gps = [0.0, -0.3704633331876934, -0.7409266663753868, -1.296621666551772, -1.4818533335404638, -1.6670849997394654, -1.8523166667281572, -2.037548333716849,
#           -2.037548333716849, -2.2227799999158506, -2.4080116669045424, -2.593243333103544, -2.778475000092236, -2.9637066670809276, -2.9637066670809276, -2.9637066670809276,
#             -2.9637066670809276, -3.5194016664676226, -3.7046333334563144, -4.075096666644008, -4.2603283336327, -4.445559999831701, -4.630791666820393, -4.630791666820393, -4.816023333019395,
#               -5.001255000008086, -5.37171833319578, -5.556950000184472, -5.742181666383473, -5.742181666383473, -6.112645000360857, -6.2978766665598584, -6.48310833354855, -6.853571666736244]
# y_gps =[0.0, -0.5556949999789627, -1.1113899999579253, -2.037548333322004, -2.5932433333009666, -2.778475000092236, -2.9637066666860825, -3.3341700000711985,
#          -3.3341700000711985, -3.7046333334563144, -4.075096666644008, -4.445560000029124, -4.6307916666229705, -5.001255000008086, -5.371718333393202, -5.927413333372165, -6.112644999966012,
#            -6.668339999944974, -6.853571666736244, -7.22403500012136, -7.409266666715206, -7.594498333309053, -8.150193333288016, -8.520656666673132, -8.891120000058248, -9.261583333443363, -9.44681500003721, 
#            -9.817278333422326, -10.002510000016173, -10.18774166661002, -10.558204999995136, -10.743436666786405, -11.113899999974098, -11.484363333359214] 
# #gps_data = [
#     # (gps_x, gps_y)
#  #   (9.5, 0.2),
# #]
# odometry_data=[]
# gps_data=[]
# x_varden=[0]
# y_varden=[0]
# x_10_20= []
# y_10_20 = []
# gps_data_plot=[]
# for i in range(len(x_gps)):
#     if len(x_gps) > i + 1:
#       gpsx= x_gps[i+1]     
#       gpsy = y_gps[i+1]
#       gps_data.append((gpsx, gpsy))
#     else:
#         gpsx=None
#         gpsy=None
# for i in range(30):
#   #rakna ut delta x o y och stoppa in i odemetry data
#   #aven lagga in gps data
#   deltax = x_o[i+1]-x_o[i]
#   deltay = y_o[i+1]-y_o[i]
#   odometry_data.append((deltax, deltay, 0.1))
  
# for i, (delta_x, delta_y, dt) in enumerate(odometry_data):
#     # Predict the robot's position using odometry
#     ekf.predict(delta_x, delta_y, dt)

#     # If a GPS measurement is available, update the state
#     if i % 10 == 9:  # GPS data
#         gps_measurement = gps_data.pop(0)  # Get the next GPS measurement
#         ekf.update_gps(*gps_measurement)
#         gps_data_plot.append(gps_measurement)
#         print('gps', gps_data_plot)
#     # Print the current estimated position
#     state = ekf.get_state()
#     if i % 10 == 9:
#         x_10_20.append(state[0])
#         y_10_20.append(state[1])
#     print(f"Estimated position at time step {i + 1}: x={state[0]:.2f}, y={state[1]:.2f}")
#     x_varden.append(state[0])
#     y_varden.append(state[1])
#     #print(f"x_varden={x_varden}, y_varden={y_varden}")
#     print(x_10_20)
# fig, ax=plt.subplots()
# ax.scatter(x_varden,y_varden,label='kalman')#plot(x_varden,y_varden,'ro')
# ax.scatter(x_10_20, y_10_20,label='10,20,30')
# f_e = []
# a_e = []
# for xy in gps_data_plot:
#     f_e.append(xy[0])
#     a_e.append(xy[1])
# ax.scatter(f_e,a_e, label='gps-data')
# print('forsta element:',f_e)
# ax.legend()
# plt.show()